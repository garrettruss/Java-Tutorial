Java Optional Class : Every Java Programmer is familiar with NullPointerException. It can crash your code. And it is very hard to avoid it without using too many null checks.
Java 8 has introduced a new class Optional in java.util package. It can help in writing a neat code without using too many null checks. By using Optional, we can specify alternate values to return or alternate code to run. This makes the code more readable because the facts which were hidden are now visible to the developer.

To avoid abnormal termination, we use the Optional class. In the following example, we are using Optional. So, our program can execute without crashing.


There are 3 major ways to create an Optional.

i) Use Optional.empty() to create empty optional.

Optional<Integer> possible = Optional.empty(); 
ii) Use Optional.of() to create optional with default non-null value. If you pass null in of(), then a NullPointerException is thrown immediately.

Optional<Integer> possible = Optional.of(5);
iii) Use Optional.ofNullable() to create an Optional object that may hold a null value. If parameter is null, the resulting Optional object would be empty (remember that value is absent; don’t read it null).

Optional<Integer> possible = Optional.ofNullable(null); 
//or
Optional<Integer> possible = Optional.ofNullable(5);


You got your Optional object is first step. Now let’s use it after checking whether it holds any value inside it.

Optional<Integer> possible = Optional.of(5); 
possible.ifPresent(System.out::println);
You can re-write above code as below code as well. However, this is not the recommended use of Optional because it’s not much of an improvement over nested null checks. They do look completely similar.

if(possible.isPresent()){
    System.out.println(possible.get());
}
If the Optional object were empty, nothing would be printed.


https://howtodoinjava.com/java8/java-8-optionals-complete-reference/