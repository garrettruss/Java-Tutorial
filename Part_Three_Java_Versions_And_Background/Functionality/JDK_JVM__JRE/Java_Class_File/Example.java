package Part_Three_Java_Versions_And_Background.Functionality.JDK_JVM__JRE.Java_Class_File;


/*
A Java class file is a file containing Java bytecode and having .class extension that can be executed by JVM. A Java class file is created by a Java compiler from .java files as a result of successful compilation. As we know that a single Java programming language source file (or we can say .java file) may contain one class or more than one class. So if a .java file has more than one class then each class will compile into a separate class files.

For Example: Save this below code as Example.java on your system.
javac Example.java

After compilation there will be 3 class files in corresponding folder named as:

Sample.class
Student.class
Example.class

 */

// Compiling this Java program would

// result in multiple class files.

class Sample {

}

// Class Declaration
class Student {

}

// Class Declaration
class Example {
    public static void main(String[] args) {
        System.out.println("Class File Structure");
    }
}

/*
 * Elements of class file are as follows:
 * 
 * magic_number: The first 4 bytes of class file are termed as magic_number.
 * This is a predefined value which the JVM use to identify whether the .class
 * file is generated by valid compiler or not. The predefined value will be in
 * hexadecimal form i.e. 0xCAFEBABE.
 * 
 * minor_version & major_version: These both together represents .class file
 * version. JVM will use these versions to identify which version of the
 * compiler generates the current .class file. We denotes the version of class
 * file as M.m where M stands for major_version and m stands for minor_version
 * Note: Lower version compiler generated .class file can be executed by high
 * version JVM but higher version compiler generated .class file cannot be
 * executed by lower version JVM. If we will try to execute we will get run time
 * exception.
 * 
 * 
 * 
 */